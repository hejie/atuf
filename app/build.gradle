apply from: "../utils.gradle"
group = APP_GROUP_ID
version = getEnvValue("versionName", APP_VERSION)
def apVersion = getEnvValue("apVersion", "")



apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName version
        testInstrumentationRunner rootProject.ext.android.testRunner

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            abiFilters "x86", "armeabi"
        }
    }
    lintOptions {
        abortOnError false
    }
    dataBinding {
        enabled = true
    }

    /* externalNativeBuild {
         cmake {
             path "CMakeLists.txt"
         }
     }*/

    //签名
    signingConfigs {
        def keystorePropertiesFile = rootProject.file("keystore.properties")
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            v2SigningEnabled rootProject.ext.signConfig.v2SigningEnabled
        }
    }

    buildTypes {
        release {
            minifyEnabled rootProject.ext.releaseConfig.minifyEnabled
            debuggable rootProject.ext.releaseConfig.debuggable
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_URL", "\"RELEASE_API_URL\""
        }
        debug {
            buildConfigField "String", "API_URL", "\"DEBUG_API_URL\""
        }
    }

    flavorDimensions "channel"
    productFlavors {
        dev {
            dimension "channel"
        }
        stage {
            dimension "channel"
        }
    }

}

def type = project.hasProperty('type') ? project.getProperty('type') : "debug"

//修改生成的apk名字及输出文件夹
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        //新名字
        def newName
        //输出文件夹
        def outDirectory = output.outputFile.getParent()
        //是否为Jenkins打包，输出路径不同
        if ("jenkins" == type) {
            //BUILD_PATH为服务器输出路径
            outDirectory = BUILD_PATH_JENKINS + "/" + BUILD_TIME
            newName = APP_NAME + "_v" + APP_VERSION + '_' + variant.productFlavors[0].name + '_' + variant.buildType.name
        } else {
            newName = APP_NAME + "_v" + APP_VERSION + '_' + variant.buildType.name
        }
        output.outputFile = new File(outDirectory, newName + '.apk')
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile rootProject.ext.dep.constraint_layout

    compile(rootProject.ext.dep.atlas_core)
            {
                transitive = true
            }
    compile rootProject.ext.dep.atlas_update
    compile rootProject.ext.dep.fastjson

    //项目依赖
    compile project(':lib-base')
    bundleCompile project(':bundle-home')
    bundleCompile project(':bundle-login')
}

//加入以下配置
atlas {
    atlasEnabled true
    tBuildConfig {
//        autoStartBundles = ['com.omd.home']
        outOfApkBundles = ['bundle-login']
        preLaunch = 'com.omd.AtlasLaunch'
        classInject false
    }
    manifestOptions {
        addAtlasProxyComponents true
    }

    patchConfigs {
        debug {
            createTPatch true
        }
        release {
            createTPatch true
        }
    }

    android.buildTypes.all { variant ->
        if (apVersion) {
            baseApDependency "com.omd.app:ap-${variant.name}:${apVersion}@ap"
            patchConfig patchConfigs.debug
        }

    }


}



apply plugin: 'maven'
apply plugin: 'maven-publish'


publishing {
    // 指定仓库位置
    repositories {
        mavenLocal()
    }

    publications {
        maven(MavenPublication) {

            android.buildTypes.all { variant ->
                if ("debug" == variant.name) {
                    //读取ap目录上传maven
                    artifact "${project.buildDir}/outputs/apk/${APP_NAME}_v${APP_VERSION}_${variant.name}.ap"
                    //生成本地maven目录
                    artifactId "ap-${variant.name}"
                    print "-----------${variant.name}"
                }
            }
        }
    }
}

project.afterEvaluate {
    disableDebugBuild()
}

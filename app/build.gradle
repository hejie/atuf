apply from: "../utils.gradle"
group = APP_GROUP_ID
version = getEnvValue("versionName", APP_VERSION);
def apVersion = getEnvValue("apVersion", "");



apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName version
        testInstrumentationRunner rootProject.ext.android.testRunner

        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            abiFilters "x86", "armeabi"
        }
    }
    /* externalNativeBuild {
         cmake {
             path "CMakeLists.txt"
         }
     }*/

    //签名
    signingConfigs {
        config {
            keyAlias rootProject.ext.signConfig.keyAlias
            keyPassword rootProject.ext.signConfig.keyPassword
            storeFile file('keystore.jks')
            storePassword rootProject.ext.signConfig.storePassword
            v2SigningEnabled rootProject.ext.signConfig.v2SigningEnabled
        }
    }

    buildTypes {
        release {
            minifyEnabled rootProject.ext.releaseConfig.minifyEnabled
            debuggable rootProject.ext.releaseConfig.debuggable
            signingConfig signingConfigs.config
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_URL", "\"release API_URL\""
        }
        debug {
            buildConfigField "String", "API_URL", "\"debug API_URL\""
        }
    }

    flavorDimensions "channel"
    productFlavors {
        omd {
            dimension "channel"
        }
        stage {
            dimension "channel"
        }
    }

}

//修改生成的apk名字及输出文件夹
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        //新名字
        def newName
        //输出文件夹
        def outDirectory
        //是否为Jenkins打包，输出路径不同
        if ("true" == IS_JENKINS) {
            //BUILD_PATH为服务器输出路径
            outDirectory = BUILD_PATH_JENKINS
            newName = APP_NAME + "_v" + APP_VERSION + '_' + variant.productFlavors[0].name + '_' + variant.buildType.name
        } else {
            //本机打包输出在本机路径
            outDirectory = output.outputFile.getParent()
            if ('debug' == variant.buildType.name) {
                newName = "${APP_NAME}_v${APP_VERSION}-${variant.buildType.name}"
            } else {
//                outDirectory = BUILD_PATH_LOCAL
                newName = APP_NAME + "_v" + APP_VERSION + '_' + variant.productFlavors[0].name + '_' + variant.buildType.name
            }
        }
        output.outputFile = new File(outDirectory, newName + '.apk')
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile rootProject.ext.dep.constraint_layout

    compile(rootProject.ext.dep.atlas_core)
            {
                transitive = true
            }
    compile rootProject.ext.dep.atlas_update
    compile rootProject.ext.dep.fastjson

    //项目依赖
    compile project(':lib-base')
    bundleCompile project(':bundle-home')
    bundleCompile project(':bundle-login')
}


def typeName = project.hasProperty('type') ? project.property('type') : 'debug'

//加入以下配置
atlas {
    atlasEnabled true
    tBuildConfig {
//        autoStartBundles = ['com.omd.home']
        outOfApkBundles = ['bundle-login']
        preLaunch = 'com.omd.AtlasLaunch'
    }
    patchConfigs {
        debug {
            createTPatch true
        }
        release {
            createTPatch true
        }
    }
    buildTypes {
        debug {
            if (apVersion) {
                baseApDependency "com.omd.app:ap-$typeName:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }
        }
    }
}



apply plugin: 'maven'
apply plugin: 'maven-publish'


publishing {
    // 指定仓库位置
    repositories {
        mavenLocal()
//        jcenter()
//        maven { url '~/.m2/repository/omd' }
    }

    publications {
        maven(MavenPublication) {
            //读取ap目录上传maven
            artifact "${project.buildDir}/outputs/apk/${APP_NAME}_v${APP_VERSION}_omd_${typeName}.ap"
            //生成本地maven目录
            artifactId "ap-${typeName}"
        }
    }
}

project.afterEvaluate {
    disableDebugBuild()
}
